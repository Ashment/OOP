<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            7. Completing a Program
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    7. Completing a Program
                </h1>
                <details>
                    <summary class="sum1">
                    7.1 Introduction
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Now that we are "done" with our program, let's actually
                        complete it!
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    7.2 Input and output
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Information_processing_system_%28english%29.svg/1000px-Information_processing_system_%28english%29.svg.png"
                            width="35%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Let's add a simple prompt for input: <code>&gt;</code>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    7.3 Error handling
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Project_error.jpg/440px-Project_error.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Now we should <i>try</i> to break our program.
                        Let's generate many instances of "bad" input, like:
                    </p>

                    <ul>
                        <li>
                            <code>4 + + ;</code>
                        </li>

                        <li>
                            <code>6 + ( 4 * ) - 2 ;</code>
                        </li>

                        <li>
                            <code>3 ;;;;;</code>
                        </li>

                        <li>
                            <code>(1+);</code>
                        </li>
                    </ul>

                    <p>
                        Try "ridiculous" input that no one should try:
                        <code>foozziefabblebop</code>.
                        Our book author used to feed his emails into the
                        compiler.
                    </p>

                </details>
                <details>
                    <summary class="sum1">
                    7.4 Negative numbers
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/US_Navy_070317-N-3642E-379_During_the_warmest_part_of_the_day%2C_a_thermometer_outside_of_the_Applied_Physics_Laboratory_Ice_Station%27s_%28APLIS%29_mess_tent_still_does_not_break_out_of_the_sub-freezing_temperatures.jpg/440px-thumbnail.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        Our program does not handle negative numbers properly.
                        It is typical that we only find out if our design is
                        correct by coding it: the computer is the only real
                        test as to whether the design works.
                        To implement unary minus (and plus -- might as well!)
                        we change our grammar for primary to:
                    </p>

                    <p>
                    <code>
                        <pre>
Primary:
    Number
    "(" Expression ")"
    "-" Primary
    "+" Primary
                        </pre>
                    </code>
                    </p>

                    <p>
                        Changing the code accordingly is so simple it might
                        just work the first run!
                    </p>

                </details>
                <details>
                    <summary class="sum1">
                    7.5 Remainder: %
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Clock_group.svg/500px-Clock_group.svg.png"
                            width="32%">
                        <figcaption>
                            Adding 4 to 9, in 12-hour-clock arithmetic, yields
                            1.
                        </figcaption>
                    </figure>

                    <p>
                        Adding modulo (%) should be easy: we add it as a
                        <code>Token</code>, and define a meaning for it.
                    </p>

                    <p>
                        The meaning for integer operands is clear and
                        unambiguous. But what about for floating point numbers?
                        There is no perfect answer. But often, modulo
                        for floats is defined as:
                        <br />
                        <code>x%y==x-y*int(x/y)</code>
                        <br />
                        The standard library function <code>fmod()</code>
                        from <code>&lt;cmath&gt;</code> implements that
                        definition. So let's modify <code>term()</code>
                        to include:
                    </p>

                    <p>
                    <code>
                        <pre>
case '%':
    {
        double d = primary(ts);
        if (d == 0) error("divide by zero");
        left = fmod(left, d);
        t = ts.get();
        break;
    }
                        </pre>
                    </code>
                    </p>

                    <p>
                        As our textbook notes, we could have also decided to
                        forbid non-integer args to modulo.
                    </p>

                </details>
                <details>
                    <summary class="sum1">
                    7.6 Cleaning up the code
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Engineers_Clean_JWST_Secondary_Reflector_with_Carbon_Dioxide_Snow.jpg/430px-Engineers_Clean_JWST_Secondary_Reflector_with_Carbon_Dioxide_Snow.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        We should never consider our code done until it is in a
                        state where we could hand it off to someone else for
                        maintenance, without having to rely on us being by
                        their side to understand what is going on.
                    </p>
                    <details>
                        <summary class="sum2">
                        7.6.1 Symbolic constants
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Blank_stop_sign_octagon.svg/260px-Blank_stop_sign_octagon.svg.png"
                                width="30%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We can make a big step forward in both the
                            readability and maintainability of our program by
                            defining some symbolic constants. In particular, we
                            will want them for '8', ';', and 'q', for input,
                            and for '&gt;' and '=' for output;
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        7.6.2 Use of functions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Our functions should name and isolate logically
                            separate parts of our program. Most of our
                            functions so far are pretty good in this respect:
                            <code>expression()</code>, <code>term()</code>,
                            and <code>primary()</code> directly express our
                            grammar, <code>get()</code> handles fetchijng
                            tokens from our input. But at this point 
                            <code>main()</code> both provides the "scaffolding"
                            for the whole program, and also handles the
                            calculation loop. Let's divide that into two
                            functions to reflect this logical division.
                        </p>


                        <p>
                        <code>
                            <pre>
void calculate(Token_stream&amp; ts)
{
    while(cin) {
        cout &lt;&lt; prompt;
        Token t = ts.get();
// this output is for debugging:
//          cout &lt;&lt; "in main(), got token: " &lt;&lt; t.kind
//              &lt;&lt; " with val of " &lt;&lt; t.value &lt;&lt; '\n';
        while(t.kind == print) t = ts.get();
        if(t.kind == quit) return;
        ts.putback(t);
        cout &lt;&lt; result &lt;&lt; expression(ts) &lt;&lt; '\n';
    }
}
                            </pre>
                        </code>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                            Drill
                        </summary>

                        <p>
                            Write the baove function in your calculator source
                            code file, and then
                            modify your <code>main()</code> to that it uses
                            that function.
                            (This is called <i>re-factoring</i> your code.)
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        7.6.3 Code layout
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            The way we format our code can make a big
                            difference as to its readability. For instance,
                            while C++ compilers don't care aout indentation, 
                            "proper" indentation can make a huge difference to
                            us as human readers of code.
                            Our textbook author suggests we re-organize 
                            <code>Token_stream::get()</code>
                            so that the first set of
                            cases are on separate lines.
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        7.6.4 Commenting
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Write comments only to express the intentions of
                            your code that you can't make obvious by the code
                            itself. For instance, never write:
                        </p>

                        <p>
                        <code>
                            <pre>
                                int x = a + b;  // add a and b and assign the result to x
                            </pre>
                        </code>
                        </p>

                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    7.7 Recovering from errors
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    7.8 Variables
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        7.8.1 Variables and definitions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        7.8.2 Introducing names
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        7.8.3 Predefined names
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        7.8.4 Are we there yet?
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
