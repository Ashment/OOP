<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            4. Computation
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    4. Computation
                </h1>
                <details>
                    <summary class="sum1">
                    4.1 Computation
                    </summary>
                    <figure>
                        <img src="graphics/Chap4Diag1.png"
                        width="35%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ul>
                        <li>
                        All programs "compute": they run on computers, after
                        all! And all they do can be called computation.
                        </li>

                        <li>
                            But: we can usefully break down this truism and say
                            that different parts of a program compute based on
                            input from another part, and then output the result
                            to be used by some other part.
                        </li>

                        <li>
                            So we can view our programs as pockets of
                            computation connected by I/O channels.
                        </li>

                        <li>
                            Inside a program, the inputs are often called
                            <i>arguments</i> and the outputs are called
                            <i>results</i>.
                        </li>

                        <li>
                            So our refined view of our programs is:
                        </li>
                    </ul>

                    <figure>
                        <img src="graphics/Chap4Diag2.png"
                            width="48%">
                        <figcaption>
                        </figcaption>
                    </figure>
                </details>
                <details>
                    <summary class="sum1">
                    4.2 Objectives and tools
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/20060513_toolbox.jpg/574px-20060513_toolbox.jpg"
                        width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        We want to express computations:
                    </p>

                    <ul>
                        <li>
                            Correctly
                        </li>

                        <li>
                            Simply
                        </li>

                        <li>
                            Efficiently
                        </li>

                    </ul>

                    <p>
                        These are the requirements of professionalism!
                        And the order matters: no one cares if a program is
                        fast at getting the wrong answer. And it can be correct
                        and fast, but if it is too complex to understand, no
                        one will be able to maintain it.
                    </p>

                    <p>
                        Our chief tool for organizing our programs is to break
                        up large problems into smaller ones. This divides into
                        two variations:
                    </p>

                    <ul>
                        <li>
                            <i>Abstraction</i>: hide messy details behind a simple
                            interface.
                        </li>

                        <li>
                            <i>"Divide and conquer"</i>: break up the problem we
                                have to solve into smaller problems, each of
                                which is easier to solve then the big problem.
                        </li>
                    </ul>

                    <p>
                        We break up our code into discrete "chunks" because a
                        1000-line chunk of code will have far more than 10
                        times the bugs as ten 100-line chunks of code.
                        Also, we should use existing tools, such as libraries,
                        whenever possible: someone else wrote and debugged it
                        for us!
                        <code>iostream</code> is a great example of this: if we
                        had to deal with the I/O hardware directly, we might be
                        writing hundreds of lines of code to do so.
                    </p>

                </details>
                <details>
                    <summary class="sum1">
                    4.3 Expressions
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/La_Diseuse_de_bonne_aventure%2C_Caravaggio_%28Louvre_INV_55%29_02.jpg/440px-La_Diseuse_de_bonne_aventure%2C_Caravaggio_%28Louvre_INV_55%29_02.jpg"
                        width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ul class="nested">
                        <li>
                        An expression computes a value from a number of
                        operands.
                        </li>

                        <li>
                            The simplest expression is a literal value, such as
                            10, "Hello NYU students", or 2.71828.
                        </li>

                        <li>
                            The names of variables are also expressions.
                            <br>
                            <code>int length = 20;</code>
                            <br />
                            In the above, a literal (20) is used to initialize
                            a variable.
                        </li>

                    </ul>

                    <figure>
                        <img src="graphics/Chap4Diag3.png"
                            width="25%">
                        <figcaption>
                            A variable is a box, labeled by its name.
                        </figcaption>
                    </figure>
                    <details>
                        <summary class="sum2">
                        4.3.1 Constant expressions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            We often have the idea of some constant value we
                            want to name, but we don't want ever to be changed;
                            for instance, <code>pi</code> can't change in the
                            course of a program, so we can write:
                            <br />
                            <code>
                                constexpr double pi = 3.14159;
                            </code>
                            <br />
                            After that, we can just use <code>pi</code>
                            whenever we need that value. And if we at some
                            point need more precision, we can just add it to
                            the <code>constexpr</code> and not need to roam
                            around our program changing it in many spots.
                        </p>

                        <p>
                            C++ <i>also</i> has the idea of a
                            <code>const</code> the value of which is not known
                            at compile time, but can't be changed after it is
                            set. So:
                            <br />
                            <code>
                                const c2 = n + 7;
                            </code>
                            <br />
                            The value of <code>n</code> won't be known until
                            the code is run, but once <code>c2</code> is set to
                            <code>n + 7</code>, it can't be changed later on.
                        </p>

                    </details>
                    <details>
                        <summary class="sum2">
                        4.3.2 Operators
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Operators serve to combine literal or variable
                            values to create a new value.
                            Here are the most common operators:
                        </p>

                        <table>
                            <tr>
                                <th>
                                    Operator
                                </th>
                                <th>
                                    Name
                                </th>
                                <th>
                                    Explanation
                                </th>
                            </tr>
                            <tr>
                                <td>
                                    <b>f(a)</b>
                                </td>
                                <td>
                                    function call
                                </td>
                                <td>
                                    pass <b>a</b> to <b>f</b>
                                    as an argument
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>++lval</b>
                                </td>
                                <td>
                                    pre-increment
                                </td>
                                <td>
                                    increment and use the incremented value
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>--lval</b>
                                </td>
                                <td>
                                    pre-decrement
                                </td>
                                <td>
                                    decrement and use the decremented value
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>!a</b>
                                </td>
                                <td>
                                    not
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>-a</b>
                                </td>
                                <td>
                                    unary minus
                                </td>
                                <td>
                                    negates <b>a</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a*b</b>
                                </td>
                                <td>
                                    multiply
                                </td>
                                <td>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a/b</b>
                                </td>
                                <td>
                                    divide
                                </td>
                                <td>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a%b</b>
                                </td>
                                <td>
                                    modulo (remainder)
                                </td>
                                <td>
                                    only for integer types
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a+b</b>
                                </td>
                                <td>
                                    add
                                </td>
                                <td>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a-b</b>
                                </td>
                                <td>
                                    subtract
                                </td>
                                <td>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>out&lt;&lt;b</b>
                                </td>
                                <td>
                                    write <b>b</b> to <b>out</b>
                                </td>
                                <td>
                                    where <b>out</b> is an <b>ostream</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>in&gt;&gt;b</b>
                                </td>
                                <td>
                                    read <b>b</b> from <b>in</b>
                                </td>
                                <td>
                                    where <b>in</b> is an <b>istream</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a&lt;b</b>
                                </td>
                                <td>
                                    less than
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a&le;b</b>
                                </td>
                                <td>
                                    less than or equal
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a&gt;b</b>
                                </td>
                                <td>
                                    greater than
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a&ge;b</b>
                                </td>
                                <td>
                                    greater than or equal
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a==b</b>
                                </td>
                                <td>
                                    equal
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a!=b</b>
                                </td>
                                <td>
                                    not equal
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a && b</b>
                                </td>
                                <td>
                                    logical and
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>a || b</b>
                                </td>
                                <td>
                                    logical or
                                </td>
                                <td>
                                    result is <b>bool</b>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>lval = a</b>
                                </td>
                                <td>
                                    assignment
                                </td>
                                <td>
                                    avoid confusion with ==
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>lval *= a</b>
                                </td>
                                <td>
                                    compound assignment
                                </td>
                                <td>
                                    also works with /, + and -
                                </td>
                            </tr>
                        </table>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.3.3 Conversions
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/d/d4/Money-Euro-USD-LEI_53073-480x360_%284791385567%29.jpg"
                            width="25%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    4.4 Statements
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        4.4.1 Selection
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.4.2 Iteration
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    4.5 Functions
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Function_machine2.svg/440px-Function_machine2.svg.png"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        4.5.1 Why bother with functions?
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.5.2 Function declarations
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    4.6 <code>vector</code>
                    </summary>
                    <figure>
                        <img src="graphics/Chap4Diag4.png"
                        width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        4.6.1 Traversing a vector
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.6.2 Growing a vector
                        </summary>
                        <figure>
                            <img src="graphics/Chap4Diag5.png" width="28%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.6.3 A numeric example
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        4.6.4 A text example
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    4.7 Language features
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
