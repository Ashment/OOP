<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            3. Objects, Types, and Values
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    3. Objects, Types, and Values
                </h1>
                <details>
                    <summary class="sum1">
                    3.1 Input
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                   Most programs need input to on the basis of which they
                   perform results.The input to be read has to be placed
                   somewhere in the computer's memory to be read by the
                   program and is called an <i>object</i>. 
                </p>
                <p>
                    A named object is called a variable and every object 
                    has a type that specifies the kind of information placed 
                    in that object.
                </p>
                <p>
                int age &equals; 42, represents an object of <i>type</i> int,
                <i>name</i> age and <i>value</i> 42.
                </p>
                <PRE>
                int main() {
                    cout &lt;&lt; "Please enter your name:\n";
                    string first_name; // variable of type string
                    cin &gt; &gt; first_name; // read characters into first name
                    cout &lt;&lt; "Hello" &lt;&lt; your name is &lt;&lt;
                    first_name;
                }

                </PRE>
                <p>
                until a newline is entered the all characters are added
                </p>

                </details>
                <details>
                    <summary class="sum1">
                    3.2 Variables
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                To access the object we need a name. A named object
                is called a variable and should have a specific
                type.
                </p>
                <p>
                The type determines the type of operation that can 
                be done on the variable.
                A statement that defines a variable is called a 
                definition and is generally used to provide an 
                initial value.</br>
                </p>
                <p>
                A compiler checks for the type of variable and 
                makes sure that you use a variable according to it's type.</br>
                </p>
                </details>
                <details>
                    <summary class="sum1">
                    3.3 Input and type
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                 <PRE>
                 int main() {
                    cout &lt;&lt; "Please enter your name:\n";
                    string first_name; // variable of type string
                    int age;
                    cin &gt; &gt; first_name; // read characters into first name
                    cin &gt;&gt; age;
                    cout &lt;&lt; first_name &lt;&lt; age;
                  } 
                  </PRE>
                <p>
                The input operation is sensitive to the type,it reads 
                depending on the type of input.</br>
                if you provided "CS 2953" as an input "CS" will be read 
                in a variable of type string and 2953 by variable of type
                int.Reading of string is terminated by whitespace which is 
                either space, tab or new line.</br>
                cin would keep reading the input charachters until a 
                new line is entered.After pressing enter, next line of
                code will be executed</br>
                </p>
                <p>
                If in the above string we provided "2953 CS", 2953 would
                be read by the string, because 2953 is a sequence of 
                character and age would be printed as 0.</br> 
                </p>
                <p>
                As you didn't provide any value to the int variable 
                and as there is a type mismatch in the above input, 
                the output that would be printed is "2953 0".</br>
                Hence, variable should be initialized so as to 
                avoid unpredictable values of data.
                </p>
                <p>
                A string read by &gt; &gt; is by default terminated 
                by a whitespace. If we want to read more than one 
                word, we would read something like in below example.
                </p>
                <PRE>
                int main() {
                    string first_name;
                    string second_name;
                    cin &gt;&gt; first_name &gt;&gt; second_name;
                }
                </PRE>
                </details>
                <details>
                    <summary class="sum1">
                    3.4 Operations and operators
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                The type of variables determine the type of operation 
                you can do on it.</br>
                </p>
                Example:
                <PRE>
                int count;
                cin &gt;&gt; count;
                string name;
                cin &gt;&gt; name;
                int c2 = count &plus; 2; // adds integer
                string first_name = name &plus; "Jr"; // appends to string

                int c3 = count &minus; 2; // - subtracts integer
                string second_name = name &minus; "Jr"; // error: &minus;
                                                        //isn't defined for
                                                         // strings
                </PRE>
                <p>
                The compiler knows the operations that can be applied 
                to each variables and can prevent many mistakes.
                There are some usual arithmetic operations like </br>
                &plus; </br>
                &minus; </br>
                &divide; </br>
                &percnt; </br>
                There are some operations which have defined functions 
                like sqrt().
                </p>
                <p>
                There are some operations on String that can be performed
                &plus; is used to concatenate the string.
                &equals; &equals; is used to compare strings.
                </p>
                </details>
                <details>
                    <summary class="sum1">
                    3.5 Assignment and initialization
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                Assignment operation is represented as &equals; </br>
                int a &equals; 8; </br>
                string b = "alpha"; </br>
                b = b + "gamma"; </br>
                Initialization and assignment are two different operations 
                done using the same operator. Initialization means 
                assigning to an empty variable. Assignment means
                clearing out old value, before putting it new value.</br>
                </p>
                    <details>
                        <summary class="sum2">
                        3.5.1 An example: detect repeated words
                        </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                    Assignment is done when you want to put new values in the
                    object.</br>
                    Consider the following example which counts the number of
                    repeated words.</br>
                </p>
                    <PRE>
                    int main() {
                        string previous = " ";
                        string current;
                        while (cin &gt;&gt; current) {
                            if (previous &equals;&equals; current) {
                                cout &lt;&lt; "repeated word" &lt;&lt; current;
                            }
                            previous &equals; current;
                        }
                    }
                    </PRE>
                <p>
                    Above example taken from "Programming practice and
                    principles" by Bjarne Stroustrup.</br>
                </p>
                <p>
                Let us understand the program.</br>
                </p>
                <ol class = "nested">
                    <li>
                Most recent word is read into the variable current. The
                <b>while</b> statement means that the statement will run
                till there are characters to read.</br>
                        <ul class = "nested">
                            <li>
                        <b>Note:</b> for a string &gt;&gt; reads whitespace seperated
                        words and you need to terminate the loop by giving 
                        end-of-input character. </br>
                        For Windows, <i>Ctrl </i> &plus; <i>Z</i> is followed by an Enter is used
                        to termminate the string. For Unix/Mac Os,<i> Ctrl</i>
                        &plus;<i> D</i> 
                            </li>
                        </ul>
                    </li>
                <li>
                    We store the input read in current to a variable named
                    previous.Then we compare the current value with previous
                    value and if they are equal, we print the output.
                </li>
                <li>
                    For the first word, the string is compared with " ".</br>
                    <b>Think:</b> Why is previous initialized 
                    with " " (an empty string denoted by space character) and not
                    passed through the cin, like instead of passing "Hi"
                    through cin, why can't we pass " Hi"?</br>
                    
                </li>
                </ol>

                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    3.6 Composite assignment operators
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                Incrementing a variable is so common that C++ provides a syntax
                for this.</br>
                <b>Example:</b> counter &equals; counter &plus; 1;  &equiv;
                counter++; Some other way to change the assigned value
                to a variable is
                a &plus; &equals; 7; </br>
                a &lowast; &equals; 6; </br>
                operators 
                &plus; &equals; </br>
                &minus; &equals; </br>
                &divide; &equals; </br>
                &percnt; &equals; </br>
                &lowast; &equals; </br>
                </p>
                    <details>
                        <summary class="sum2">
                        3.6.1 An example: find repeated words
                        </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                In the code we discussed above, we can modify the code 
                to count the words and outputs the count for the repeated
                words.
                </p>
                <PRE>
                    int main() {
                    int number_of_words = 0;    
                        string previous = " ";
                        string current;
                        while (cin &gt;&gt; current) {
                           ++number_of_words;
                           if (previous &equals;&equals; current) {
                                cout &lt;&lt; "repeated word" &lt;&lt; current
                                &lt;&lt; "word number" &lt;&lt; number_of_words;
                            }
                            previous &equals; current;
                        }
                    }
                </PRE>
                We start word counter at 0. Each time we see a word, we
                increment the counter and we print the word which is repeated
                and the position at which it occured.
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    3.7 Names
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                A name for a variable is used to make it easier to refer them
                from somewhere else in the program. A name in C++ refers with 
                a letter and can contain only letters, digits and underscore.
                </p>
                </details>
                <details>
                    <summary class="sum1">
                    3.8 Types and objects
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                </p>
                </details>
                <details>
                    <summary class="sum1">
                    3.9 Type safety
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                </p>
                    <details>
                        <summary class="sum2">
                        3.9.1 Safe conversions
                        </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        3.9.2 Unsafe conversions
                        </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the text material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="30%">
                        <figcaption>
                        </figcaption>

                        <ul>
                        </ul>
                    </figure>
                </details>

            </div>
        </div>

    </body>
</html>
