<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            3. Objects, Types, and Values
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    3. Objects, Types, and Values
                </h1>
                <details>
                    <summary class="sum1">
                    3.1 Input
                    </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Backlit_keyboard.jpg/620px-Backlit_keyboard.jpg"
                        width="30%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                   Most programs need input to on the basis of which they
                   perform results.The input to be read has to be placed
                   somewhere in the computer's memory to be read by the
                   program and is called an <i>object</i>. 
                </p>


                <p>
                <PRE>
                <code>
                int main() {
                    cout &lt;&lt; "Please enter your name:\n";
                    string first_name; <span class="comment">// variable of type string</span>
                    cin &gt; &gt; first_name; <span class="comment">// read characters into first name</span>
                    cout &lt;&lt; "Hello" &lt;&lt; your name is &lt;&lt; first_name;
                }
                </code>
                </PRE>
                </p>

                <p>
                <code>cin</code> adds all characters typed
                until a newline is entered.
                </p>


                </details>
                <details>
                    <summary class="sum1">
                    3.2 Variables
                    </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/VISTA_views_the_Trifid_Nebula_and_reveals_hidden_variable_stars.jpg/600px-VISTA_views_the_Trifid_Nebula_and_reveals_hidden_variable_stars.jpg"
                        width="30%">
                    <figcaption>
                        Stars have a variable brightness.
                    </figcaption>
                </figure>
                <p>
                    A named object is called a <i>variable</i> and every object 
                    has a type that specifies the kind of information 
                    that can be placed in that object.
                </p>

                <p>
                <code>int age &equals; 42</code>
                represents an object of <i>type</i> int,
                <i>name</i> "age" and <i>value</i> 42.
                </p>

                
                <p>
                The type determines the type of operation that can 
                be done on the variable.
                A statement that defines a variable is called a 
                definition and is generally used to provide an 
                initial value.
                </p>

                <p>
                A compiler checks for the type of variable and 
                makes sure that you use a variable according to its type.
                </p>

                </details>
                <details>
                    <summary class="sum1">
                    3.3 Input and type
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <PRE>
                <code>
                 #include "std_lib_facilities.h"

                 int main() {
                     cout &lt;&lt; "Please enter your name:\n";
                     string first_name; <span class="comment">// variable of type string</span>
                     int age;
                     cin &gt; &gt; first_name; <span class="comment">// read characters into first name</span>
                     cin &gt;&gt; age;
                     cout &lt;&lt; first_name &lt;&lt; age;
                  } 
                </code>
                  </PRE>
                <p>
                The input operation is sensitive to the type
                of the variable being read into.
                If you provided <span class="input">CS 2953</span>
                as an input <span class="input">CS</span> will be read 
                as type string and <span class="input">2953</span>
                as type int. The reading of a string is terminated
                by whitespace which is either space, tab or new line.
                <code>cin</code> will keep reading the input characters until a 
                new line is entered. After the user presses enter,
                the next line of code will be executed.
                </p>

                <p>
                If in the above code the user typed
                <span class="input">2953 CS</span>,
                <span class="input">2953</span> would
                be read as a string, and age would be 0.
                </p>

                <p>
                As the user didn't provide a valid value to the int variable 
                (there is a type mismatch in the above input),
                the output that would be printed is "2953 0".</br>
                </p>

                <p>
                A string read by &gt; &gt; is by default terminated 
                by a whitespace. If we want to read more than one 
                string, we would use something like in this example:
                </p>

                <PRE>
                int main() {
                    string first_name;
                    string second_name;
                    cin &gt;&gt; first_name &gt;&gt; second_name;
                }
                </PRE>
                </details>
                <details>
                    <summary class="sum1">
                    3.4 Operations and operators
                    </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Telefonister%2C_Stockholms_telefonsstation_-_Nordiska_Museet_-_NMA.0037077.jpg/440px-Telefonister%2C_Stockholms_telefonsstation_-_Nordiska_Museet_-_NMA.0037077.jpg"
                        width="30%">
                    <figcaption>
                        Some smooth operators.
                    </figcaption>
                </figure>
                <p>
                The type of a variable determine the types of operations
                you can apply to it.
                An example:
                </p>

                <PRE>
                <code>
                int count;
                cin &gt;&gt; count;
                string name;
                cin &gt;&gt; name;
                int c2 = count &plus; 2; <span class="comment">// adds an integer</span>
                string first_name = name &plus; "Jr"; <span class="comment">// appends to a string</span>
                int c3 = count &minus; 2; <span class="comment">// - subtracts an integer</span>
                string second_name = name &minus; "Jr"; <span class="comment">// error: &minus; isn't defined for strings</span>
                </code>
                </PRE>
                <p>
                The compiler knows the operations that can be applied 
                to each variables and can prevent many mistakes.
                There are some usual arithmetic operations like </br>
                &plus; </br>
                &minus; </br>
                &divide; </br>
                &percnt; </br>
                There are some operations which have defined functions 
                like sqrt().
                </p>

                <p>
                There are some operations that can be performed on strings:<br>
                &plus; is used to concatenate strings.
                <br />
                &equals; &equals; is used to compare strings.
                </p>

                </details>
                <details>
                    <summary class="sum1">
                    3.5 Assignment and initialization
                    </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Homework_-_vector_maths.jpg/660px-Homework_-_vector_maths.jpg"
                        width="30%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                The <i>assignment</i>
                operation is represented by &equals;: </br>
                <code>int a &equals; 8;</code> </br>
                <code>string b = "alpha";</code> </br>
                <code>b = b + "gamma";</code> </br>
                Initialization and assignment are two different operations 
                done using the same operator. Initialization means 
                assigning to an empty variable. Assignment means
                clearing out the old value and then putting 
                in the new value.
                </p>

                    <details>
                        <summary class="sum2">
                        3.5.1 An example: detect repeated words
                        </summary>
                <p>
                    You use assignment when you want to put new values in an
                    object.  Consider the following example which counts the number of
                    repeated words in the program's input:
                </p>

                <p>
                    <PRE>
                    <code>
                    int main() {
                        string previous = " ";
                        string current;
                        <span class="keyword">while</span> (cin &gt;&gt; current) {
                            <span class="keyword">if</span> (previous &equals;&equals; current) {
                                cout &lt;&lt; "repeated word" &lt;&lt; current;
                            }
                            previous &equals; current;
                        }
                    }
                    </code>
                    </PRE>
                </p>

                <p>
                The above example is taken from <i>Programming: Principles
                    and Practices Using C++</i> by Bjarne Stroustrup,
                as our most of our other examples.
                </p>

                <p>
                Let us analyze the program.
                </p>

                <ol class = "nested">
                    <li>
                The most recent word is read into the variable <code>current</code>.
                The
                <span class="keyword">while</span>
                condition means that the loop will run
                till there are no more characters to read.</br>
                        <br>
                        <i>Note:</i> For a string <code>&gt;&gt;</code>
                        will read whitespace separated
                        words and you need to terminate the loop with an
                        end-of-input character. </br>
                        For Windows, <i>Ctrl </i> &plus; <i>Z</i>
                        is followed by an Enter is used
                        to termminate the string. For Unix/Mac OS,
                        <i> Ctrl</i> &plus;<i> D</i> 
                    </li>
                <li>
                    We store the input read in <code>current</code>
                    to a variable named
                    <code>previous</code>.
                    Then we compare the current value with previous
                    value and if they are equal, we print the output.
                </li>
                <li>
                    For the first word, the string is compared with " ".</br>
                    <b>Think:</b> Why is previous initialized 
                    with " "?
                </li>
                </ol>

                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    3.6 Composite assignment operators
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                Incrementing a variable is so common that C++ provides a syntax
                for this.</br>
                <b>Example:</b>
                <code>counter &equals; counter &plus; 1;</code>
                &equiv;
                <code>counter++;</code>
                Some other ways to change the assigned value
                to a variable are:
                </p>

                <ul class="nested">
                    <li>&plus; &equals; </li>
                    <li>&minus; &equals; </li>
                    <li>&divide; &equals; </li>
                    <li>&percnt; &equals; </li>
                    <li>&lowast; &equals; </li>
                </ul>

                    <details>
                        <summary class="sum2">
                        3.6.1 An example: find repeated words
                        </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                In the code we discussed above, we can modify the code 
                to count the words and outputs the count for the repeated
                words.
                </p>

                <PRE>
                    int main() {
                    int number_of_words = 0;    
                        string previous = " ";
                        string current;
                        while (cin &gt;&gt; current) {
                           ++number_of_words;
                           if (previous &equals;&equals; current) {
                                cout &lt;&lt; "repeated word" &lt;&lt; current
                                &lt;&lt; "word number" &lt;&lt; number_of_words;
                            }
                            previous &equals; current;
                        }
                    }
                </PRE>
                We start word counter at 0. Each time we see a word, we
                increment the counter and we print the word which is repeated
                and the position at which it occured.
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    3.7 Names

                    </summary>
                <figure>
                    <img
                    src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Ramesses_II_cartouches_at_Tanis.jpg/440px-Ramesses_II_cartouches_at_Tanis.jpg"
                    width="27%">
                    <figcaption>
                        The name of an Egyptian pharaoh.
                    </figcaption>
                </figure>
                <p>
                A name for a variable is used to make it easier to refer them
                from somewhere else in the program. A name in C++ refers with 
                a letter and can contain only letters, digits and
                underscore. A variable name cannot start with a
                number.
                </p>

                <p>
                Here are some invalid variable names:</br> 
                </p>

                <ul>
                    <li>
                        #name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// # is
                                                not a valid character
                    </li>
                    <li>
                        var$name&nbsp;&nbsp;&nbsp;// a dollar sign
                                    is not allowed in a variable name
                    </li>
                    <li>
                        spice jet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// space is
                                                        not allowed 
                    </li>
                    <li>
                        2x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        // a variable name cannot start with a number
                    </li>
                </ul>
                <p>
                Variable names shouldn't be a reserved word. The compiler will
                generate errors for such uses.
                Although an underscore is allowed as a variable name and you can
                start a variable with an underscore, it is better to avoid such
                names because the compiler has some words reserved for machine
                and system implementation which start with an underscore.</br>
                Variable names are case sensitive: <code>foo</code> and
                <code>Foo</code> are different variables.  You should avoid
                case sensitive variable names like IF or If, which is a case
                variation of a reserved word.  Compiler would not throw an
                error in such cases, but a programmer might get confused with
                such assignments. 
                </p>

                <p> 
                <b>Notes:</b> 
                </p>

                <ol>
                    <li>
                    There are keywords that are reserved by C++ like
                <code>if</code>, <code>case</code>, <code>while</code>,
                and <code>for</code>, which should not be used as variable names.
                    </li>

                    <li>
                We should not use long variable names as they are hard to type,
                too long and not required.
                    </li>

                    <li>
                General practice for C++ variable names is to use
                underscores between words, like
                <code>spice_jet</code>.
                    </li>

                    <li>
                You should avoid using variable names that are all uppercase, 
                as that use is reserved for macros.
                    </li>

                    <li>
                Initial letter as uppercase is used when creating user-defined
                types like <code>Employee</code>.
                    </li>
                </ol>
                </details>


                <details>
                    <summary class="sum1">
                    3.8 Types and objects
                    </summary>
                <figure>
                    <img src="" width="40%">
                    <figcaption>
                    </figcaption>
                </figure>
                <ul class="nested">
                    <li>
                    <b>Type</b>:
                    Defines set of possible values and operation
                    for an object.
                    </li>

                    <li>
                    <b>Object</b>:
                    Holds a value of a certain type.
                    </li>

                    <li>
                    <b>Value</b>:
                    The actual bits in memory, interpreted according to the
                    type assigned.
                    </li>

                    <li>
                    <b>Declaration</b>:
                    is an assignment of name to an object
                    </li>

                    <li>
                    <b>Definition</b>:
                    sets aside memory for an object.
                    </li>

                </ul>

                <p>
                Informally, we can think of an object as a box, into which we
                can put data of certain type.
                <code>int a = 7</code> means <code>a</code>
                is of type <code>int</code> and it can hold integer values.
                </p>

                <figure>
                    <img src="" width="30%">
                    <figcaption>
                    </figcaption>
                </figure>
                
                <p>
                As we can see from above image, the string representation is a
                bit complex. It also holds the length of string. The memory
                required to store a data depends on the type of data.
                A bit is a unit of memory in a computer. A byte is represented
                by 8 bits. char requires 1 byte to store a data. int requires 
                4 bytes.</br></br>
                </p>

                
                <figure>
                    <img src="" width="30%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                </br>Each type of data is stored as bits in a computer memory,i.e.
                an int 120 and char 'x' are both stored as bits,
                hence it is necessary to specify the type of data to exactly
                understand the value of data stored.</br>
                </p>


                </details>
                <details>
                    <summary class="sum1">
                    3.9 Type safety
                    </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Snake_warning_sign.jpg/500px-Snake_warning_sign.jpg"
                    width="20%">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                A program is type safe when operations on objects are done
                according to the type of object. We can do certain operations
                which are type unsafe and C++ compilers unfortunately allows
                that. For example, one should not use a variable which is
                uninitialized as it might give some unexpected output when
                used. This operation is type unsafe and C++ compiler doesn't
                catch it.
                </p>

                <p>
                Ideally a programmer should use operations that are checked by
                compiler for static type safety, but this causes a lot of
                restrictions while programmimg. With C++, a programmer should
                be careful while coding and should avoid such type unsafe
                operations. 
                </p>

                    <details>
                        <summary class="sum2">
                        3.9.1 Safe conversions
                        </summary>
                <figure>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/Baseball_-_sledge_making_base.jpg/500px-Baseball_-_sledge_making_base.jpg"
                        width="28%">
                    <figcaption>
                        He's safe!
                    </figcaption>
                </figure>
                <p>
                There are certain conversions between the types which can be
                done without compromising type safety.
                For example an int can be converted to a double, or a char 
                can be converted to an int. The following are the conversions
                which are safe:
                </p>

                <ul class="nested">
                    <li>
                        bool to char
                    </li>
                    <li>
                        bool to int
                    </li>
                    <li>
                        bool to double
                    </li>
                    <li>
                        char to  int
                    </li>
                    <li>
                        char to double
                    </li>
                    <li>
                        int to double
                    </li>
                </ul>

                    </details>
                    <details>
                        <summary class="sum2">
                        3.9.2 Unsafe conversions
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Partial_stadium_collapse_at_Big12_college_football_championship_-_2005.JPG/440px-Partial_stadium_collapse_at_Big12_college_football_championship_-_2005.JPG"
                                width="30%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>

                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>

                        <ul>
                        </ul>
                    </figure>
                </details>

            </div>
        </div>

    </body>
</html>
