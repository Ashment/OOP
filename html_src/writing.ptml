<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            6. Writing a Program
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    6. Writing a Program
                </h1>

                <p class="leadquote">
                    "Programming is understanding." -- Kristen Nygaard
                </p>

                <details>
                    <summary class="sum1">
                    6.1 A problem
                    </summary>
                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/en/9/9e/4-cube_4%5E4.png"
                            width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        We want the problem we take on next to have the
                        following characteristics:
                    </p>

                    <ul>
                        <li>
                            Illustrates good design and programming techniques
                        </li>

                        <li>
                            We explore the kind of decisions we make in
                            designing "real" programs.
                        </li>

                        <li>
                            Doesn't require too many new programming languages
                            features.
                        </li>

                        <li>
                            Is complicated enough to require thought about its
                            design.
                        </li>

                        <li>
                            Allows for many variations in its solution.
                        </li>

                        <li>
                            Solves an easily understood problem.
                        </li>

                        <li>
                            Solves a problem worth solving.
                        </li>

                        <li>
                            Has a small enough solution to fully comprehend.
                        </li>
                    </ul>

                    <p>
                        Our author chose programming a calculator as our first
                        multi-part program.
                    </p>

                </details>
                <details>
                    <summary class="sum1">
                    6.2 Thinking about the problem
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Le_penseur_de_la_Porte_de_lEnfer_%28musée_Rodin%29_%284528252054%29.jpg/520px-Le_penseur_de_la_Porte_de_lEnfer_%28musée_Rodin%29_%284528252054%29.jpg"
                            width="33%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        We start by thinking about the problem. An important
                        point: Stroustrup recommends <i>discussing the problem
                        with a friend</i>. Programming is a <i>social</i>
                        activity.
                    </p>

                    <p>
                        The technique of development here progressively refines
                        an initial cut at the problem. This is the method that
                        has the best track-record for achieving good results.
                        In today's jargon, it is often called "developing a
                        minimal viable product" (MVP) to start with, and then
                        continually improving that product.
                    </p>

                    <details>
                        <summary class="sum2">
                        6.2.1 Stages of development
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Iterative_development_model.svg/600px-Iterative_development_model.svg.png"
                                width="33%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Working on a problem, we typically
                            <i>repeatedly</i> go through these stages:
                        </p>

                        <ul>
                            <li>
                                <span class="hilight">
                                    Analysis:
                                </span>
                                What does a solution to our problem look like?
                                What features <i>must</i> it include? What
                                features would be <i>nice</i> to include?
                            </li>

                            <li>
                                <span class="hilight">
                                    Design:
                                </span>
                                How do we break the system into comprehensible
                                parts to achieve the goals analysis has
                                revealed to us?
                            </li>

                            <li>
                                <span class="hilight">
                                    Development:
                                </span>
                                Write the code that implements our design, and
                                debug and test it.
                            </li>
                        </ul>

                    </details>
                    <details>
                        <summary class="sum2">
                        6.2.2 Strategy
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/f/f3/Staunton_chess_set.jpg"
                                width="30%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Some suggestions:
                        </p>

                        <ul>
                            <li>
                                Take the user's point of view and ask what the
                                program is for. If you were using it, how would
                                you like it to work?
                                <ul class="nested">
                                    <li>
                                        Is the problem clear? Are we asking for
                                        too much? (Best to build an MVP, and
                                        then improve it based on user
                                        feedback.)
                                    </li>

                                    <li>
                                        Can we really tackle this project,
                                        given our time, resources, knowledge,
                                        etc.? No point in taking on something
                                        you can't possibly complete!
                                    </li>
                                </ul>
                            </li>

                            <li>
                                Break the program down into manageable parts.
                                <ul class="nested">
                                    <li>
                                        Can we use existing tools, libraries,
                                        etc. that might help?
                                        If so, always use them!
                                        How do we know if they are worth
                                        adopting? Ask friends, ask Google, look
                                        on StackOverflow.
                                    </li>

                                    <li>
                                        Look for parts of the solution that can
                                        be separately described and potentially
                                        re-used. Correctly identifying such
                                        parts requires experience: that is why
                                        we present you with many examples.
                                    </li>
                                </ul>
                            </li>

                            <li>
                                Build a small, limited version of the program
                                that solves a key part of the problem.
                                <br />
                                Why?
                                <ul class="nested">
                                    <li>
                                        This will force to the surface
                                        misapprehensions in our understanding 
                                        of the problem we wish to solve.
                                        Ultimately, the computer itself is the
                                        measure of our design!
                                    </li>

                                    <li>
                                        We also may need to change some aspects
                                        of the design to make our problem
                                        manageable: perhaps the "ideal" spec
                                        involves using an exponential
                                        algorithm, but in fact we can come
                                        "close enough" with a polynomial one.
                                    </li>
                                </ul>
                            </li>

                            <li>
                                Build a full-scale version, using parts of the
                                initial version. <span class="hilight">Our
                                ideal:</span> Grow a program from working
                                parts.
                            </li>
                        </ul>

                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    6.3 Back to the calculator!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Grant_mechanical_calculating_machine_1877.jpg/440px-Grant_mechanical_calculating_machine_1877.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        We're not going to try to learn GUI programming in this
                        course, so let's stick to the console, using
                        <code>cout</code> and <code>cin</code>. We want to be
                        able to take as input, say:
                        <br />
                        <code>2+2</code>
                        <br />
                        and return <code>4</code> as a result. Or we should be
                        able to accept:
                        <br />
                        <code>2+2*3</code>
                        and return <code>8</code> as a result.
                    </p>

                    <p>
                        We may first come up with some <i>pseudo-code</i> like:
                        <br />
                        <code>read_a_line
                        <br />
                        calculate
                        <br />
                        write_result
                        <br />
                        </code> 
                    </p>

                    <details>
                        <summary class="sum2">
                        6.3.1 First attempt
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Climbing_over_a_Crevasse_Bridge.jpg/440px-Climbing_over_a_Crevasse_Bridge.jpg"
                                width="27%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Well, we are anxious to start writing code, so let
                            us try:
                        </p>

                        <p>
                        <code>
                            <pre>
#include "std_lib_facilities.h"

int main()
{
    cout &lt;&lt;"Please enter an expression (we can handle + and -):\n";
    int lval = 0;
    int rval;
    char op;
    int res;
    cin &gt;&gt; lval &gt;&gt; op &gt;&gt; rval; // read e.g. 1 + 3

    if(op=='+')
        res = lval + rval;
    else if(op=='-')
        res = lval - rval;

    cout &lt;&lt; "Result: " &lt;&lt; res &lt;&lt; '\n';
    keep_window_open();  // if necessary on your system!
    return 0;
}
                            </pre>
                        </code>
                        </p>

                        <p>
                            <code>lval</code> is our variable for the left-hand
                            value, and <code>rval</code> for the right-hand
                            value.
                            <br />
                            Well, we have something (kind of) working!
                            <br />
                            Let's improve our program by:
                        </p>

                        <ol>

                            <li>
                                Clean up our code
                            </li>

                            <li>
                                Add multiplication and division
                            </li>

                            <li>
                                Add the ability to handle more than one operand
                                (e.g., <code>1+2+3</code>)
                            </li>
                        </ol>

                        <p>
                            So let's try this:
                        </p>

                        <p>
                        <code>
                            <pre>
#include "std_lib_facilities.h"

int main()
{
    cout &lt;&lt; "Please enter an expression (we can handle +, -, *, and /):\n";
    cout &lt;&lt; "Add an x to end expression (e.g., 1+2*3x): ";
    int lval = 0;
    int rval;
    int res;
    cin &gt;&gt; lval;
    if(!cin) error("No first operand!");
    for(char op; cin &gt;&gt; op;) {   // repeatedly read ops
        if(op!='x') cin &gt;&gt; rval;
        if(!cin) error("No second operand!");
        switch(op) {
        case '+':
            lval += rval;
            break;
        case '-':
            lval -= rval;
            break;
        case '*':
            lval *= rval;
            break;
        case '/':
            lval /= rval;
            break;
        default:
            cout &lt;&lt; "Result: " &lt;&lt; lval &lt;&lt; '\n';
            keep_window_open();  // if necessary on your system!
            return 0;
        }
    }
    error("Bad expression");
}
                            </pre>
                        </code>
                        </p>

                        <p>
                            Problems:
                        </p>

                        <ol>
                            <li>
                                We accept multi-line expressions.
                            </li>

                            <li>
                                Our operator precedence is wrong! 
                                But how do we find the "correct"
                                operator amongst all input?
                            </li>

                            <li>
                                How do we remember the place of each op?
                            </li>

                            <li>
                                How do we avoid proceeding strictly
                                left-to-right?
                            </li>
                        </ol>

                    </details>
                    <details>
                        <summary class="sum2">
                        6.3.2 Tokens
                        </summary>
                        <figure>
                            <img
                            src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/IsthmusCityChips.jpg/440px-IsthmusCityChips.jpg"
                                width="24%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We are going to <i>tokenize</i> our input
                            to get this right!
                            <code>Token</code> will be our first
                            <i>user-defined type</i>.
                            We will initially define:
                        </p>

                        <ul>
                            <li>
                                Floating point numbers: 1.23, 0.274e2, 42
                            </li>

                            <li>
                                Operators: +, -, *, /, %
                            </li>

                            <li>
                                Parentheses: (, )
                            </li>
                        </ul>


                        <p>
                            Tokens will hold a kind and a value (for floats).
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        6.3.3 Implementing tokens
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Our initial definition of <code>Token</code>:
                        </p>

                        <p>
                        <code>
                            <pre>
class Token {
public:
    char kind;
    double value;
};
                            </pre>
                        </code>
                        </p>

                        <p>
                            We can initialize (construct) <code>Token</code> 
                            objects like this:
                        </p>

                        <p>
                        <code>
                            <pre>
Token t1 {'+'};
Token t2 {'8', 11.5};
                            </pre>
                        </code>
                        </p>

                    </details>
                        
                    <details>
                        <summary class="sum2">
                        6.3.4 Using tokens
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We will read a stream of tokens into a 
                            <code>vector</code>, so we need:
                        </p>

                        <p>
                        <code>
                            <pre>
Token get_token();  // read token from cin

vector&lt;Token&gt; tok;

int main()
{
    Token t = get_token();
    tok.push_back(t);
}
                            </pre>
                        </code>
                        </p>

                    </details>
                    <details>
                        <summary class="sum2">
                        6.3.5 Back to the drawing board
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            OK, we have tokens: now what? This helps us 
                            sorting out the text into pieces, but how do
                            we get the order of evaluations correct?
                            And can we support variables?
                            We'd better back up and think some more.
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    6.4 Grammars
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/5/54/Parse_tree_1.jpg"
                            width="25%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        How do we get an expression like
                        <code>45+11.5/7</code>  correct?
                        We tokenize it to:
                    </p>

                    <p>
                    <code>
                        <pre>
45
+
11.5
/
7
                        </pre>
                    </code>
                    </p>

                    <p>
                        Then we write a <i>grammar</i> to express
                        our rules like "division binds tighter than addition"
                        and write code to implement that grammar. For example:
                    </p>

                    <p>
                    <code>
                        <pre>
// a simple expression grammar:

Expression:
    Term
    Expression "+" Term
    Expression "-" Term
Term:
    Primary
    Term "*" Primary
    Term "/" Primary
    Term "%" Primary
Primary:
    Number
    "(" Expression ")"
Number:
    floating-point literal
                        </pre>
                    </code>
                    </p>

                    <p>
                        Let's parse some expressions using this grammar:
                        <br />
                        2
                        <br />
                        2+3
                        <br />
                        45+11.5*7
                    </p>

                    <details>
                        <summary class="sum2">
                        6.4.1 A detour: English grammar
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            To wrap our heads around this, let's make 
                            a simplistic grammar for English:
                        </p>

                        <p>
                        <code>
                            <pre>
Sentence:
    Noun Verb
    Sentence Conjunction Sentence
Conjunction:
    "and"
    "but"
    "or"
Noun:
    "birds"
    "fish"
    "C++"
Verb:
    "rules"
    "fly"
    "swim"
                            </pre>
                        </code>
                        </p>

                        <p>
                            We can now make sentences like "C++ rules
                            but fish swim."
                        </p>


                    </details>
                    <details>
                        <summary class="sum2">
                        6.4.2 Writing a grammar
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            A grammar for lists:
                        </p>

                        <p>
                        <code>
                            <pre>
List:
    "{" Sequence "}"
Sequence:
    Element
    Element "," Sequence
Element:
    "A"
    "B"
                            </pre>
                        </code>
                        </p>

                        <p>
                            According to that grammar, which of the following
                            are valid lists, and which not?
                        </p>

                        <p>
                        <code>
                            <pre>
{ A }
{ }
A, B, A, B
{ A, B, B, B }
{ A, B, B, B, }
{ A B B B }
                            </pre>
                        </code>
                        </p>


                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    6.5 Turning a grammar into code
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        6.5.1 Implementing grammar rules
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        6.5.2 Expressions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        6.5.3 Terms
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        6.5.4 Primary expressions
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    6.6 Trying the first version
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    6.7 Trying the second version
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    6.8 Token streams
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        6.8.1 Implementing Token_stream
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        6.8.2 Reading tokens
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        6.8.3 Reading numbers
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    6.9 Program structure
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        The structure of the whole program (with details
                        omitted) should be:
                    </p>

                    <p>
                    <code>
                        <pre>
#include "std_lib_facilities.h"

class Token { /* ... */ };
class Token_stream { /* ... */ };

void Token_strem::putback(Token t) { /* ... */ }
Token Token_stream::get() { /* ... */ }

Token_stream ts;
double expression();

double primary() { /* ... */ }
double term() { /* ... */ }
double expression() { /* ... */ }

int main() { /* ... */ }
                        </pre>
                    </code>
                    </p>

                    <p>
                        Order is important! Names must be declared before
                        they are used.
                    </p>

                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
